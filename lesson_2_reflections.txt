What happens when you initialize a repository? Why do you need to do it?
To initialize a repository is to set up a repository. This setting up creates a .git directory in the directory where the git 
init command is ran. The created .git directory is the implementation of the repository. The repository is associated with 
the containing directory of the .git directory in the way that the repository archives a content that is a part of the directory.
We initialize, set up, a repository, to archive a content.

How is the staging area different from the working directory and the repository? What value do you think it offers?
A repository is implemented by a .git directory. The working directory of the repository is the containing directory of the .git
directory. The staging area of a repository is an abstract area to place content to be committed. The staging area allows
gathering of content to be committed before a commit.

How can you use the staging area to make sure you have one commit per logical change?
I think the qustion should be 
How can you use the staging area to make sure you have one logical change per commit?
I can use the staging area to stage changes that constitute a logical change for a commit.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
Branches would be helpful in experimenting changes and developing a content in two or more
separate paths starting from a point. In experiencing changes, a new branch can be created
for committing the experimental changes, leaving other branches, including the master branch,
untouched. For developing a content in multiple paths, commits belonging to a particular
development path can be made to a particular branch, leaving other branches untouched. 
